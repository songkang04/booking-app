import 'reflect-metadata';
import * as dotenv from 'dotenv';
import * as bcrypt from 'bcrypt';
import mongoose from 'mongoose';
import { connectMongoDB } from '../src/config/mongodb';
import { User, UserRole } from '../src/schemas/user.schema';
import { Homestay } from '../src/schemas/homestay.schema';

dotenv.config();

/**
 * Script ƒë·ªÉ kh·ªüi t·∫°o d·ªØ li·ªáu c∆° b·∫£n cho MongoDB
 */
async function initializeMongoDBData() {
    try {
        console.log('üöÄ B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o d·ªØ li·ªáu c∆° b·∫£n cho MongoDB...');
        
        // K·∫øt n·ªëi ƒë·∫øn MongoDB
        console.log('üîå ƒêang k·∫øt n·ªëi ƒë·∫øn MongoDB...');
        await connectMongoDB();
        console.log('‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng!');

        // T·∫°o t√†i kho·∫£n admin
        console.log('üë§ ƒêang t·∫°o t√†i kho·∫£n admin...');
        const existingAdmin = await User.findOne({ email: 'admin@example.com' });
        
        if (!existingAdmin) {
            // M√£ h√≥a m·∫≠t kh·∫©u
            const salt = await bcrypt.genSalt(10);
            const hashedPassword = await bcrypt.hash('Admin@123', salt);
            
            const admin = new User({
                firstName: 'Admin',
                lastName: 'User',
                email: 'admin@example.com',
                password: hashedPassword,
                role: UserRole.ADMIN,
                isEmailVerified: true,
            });
            
            await admin.save();
            console.log('‚úÖ ƒê√£ t·∫°o t√†i kho·∫£n admin th√†nh c√¥ng.');
        } else {
            console.log('‚ÑπÔ∏è T√†i kho·∫£n admin ƒë√£ t·ªìn t·∫°i.');
        }

        // T·∫°o t√†i kho·∫£n demo cho ng∆∞·ªùi d√πng
        console.log('üë§ ƒêang t·∫°o t√†i kho·∫£n demo...');
        const existingDemoUser = await User.findOne({ email: 'user@example.com' });
        
        if (!existingDemoUser) {
            // M√£ h√≥a m·∫≠t kh·∫©u
            const salt = await bcrypt.genSalt(10);
            const hashedPassword = await bcrypt.hash('User@123', salt);
            
            const demoUser = new User({
                firstName: 'Demo',
                lastName: 'User',
                email: 'user@example.com',
                password: hashedPassword,
                role: UserRole.USER,
                isEmailVerified: true,
            });
            
            await demoUser.save();
            console.log('‚úÖ ƒê√£ t·∫°o t√†i kho·∫£n demo th√†nh c√¥ng.');
        } else {
            console.log('‚ÑπÔ∏è T√†i kho·∫£n demo ƒë√£ t·ªìn t·∫°i.');
        }

        // L·∫•y id c·ªßa admin ƒë·ªÉ t·∫°o homestay
        const admin = await User.findOne({ email: 'admin@example.com' });
        if (!admin) {
            throw new Error('Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n admin');
        }

        // T·∫°o d·ªØ li·ªáu m·∫´u homestay
        console.log('üè† ƒêang t·∫°o d·ªØ li·ªáu m·∫´u homestay...');
        
        const homestays = [
            {
                name: 'Villa ƒê√† L·∫°t Garden',
                description: 'Villa sang tr·ªçng v·ªõi view ƒë·∫πp nh√¨n ra th√†nh ph·ªë ƒê√† L·∫°t.',
                address: '42 ƒê∆∞·ªùng Tr·∫ßn H∆∞ng ƒê·∫°o, Ph∆∞·ªùng 3, ƒê√† L·∫°t',
                city: 'ƒê√† L·∫°t',
                province: 'L√¢m ƒê·ªìng',
                country: 'Vi·ªát Nam',
                images: [
                    'https://images.unsplash.com/photo-1564013799919-ab600027ffc6?w=800&auto=format&fit=crop&q=60',
                    'https://images.unsplash.com/photo-1564013799919-ab600027ffc6?w=800&auto=format&fit=crop&q=60'
                ],
                price: 1200000,
                capacity: 8,
                bedroomCount: 4,
                bathroomCount: 3,
                amenities: ['Wifi', 'B√£i ƒë·ªó xe', 'H·ªì b∆°i', 'ƒêi·ªÅu h√≤a', 'Nh√† b·∫øp'],
                hostId: admin._id,
                isActive: true
            },
            {
                name: 'Sapa Mountain View',
                description: 'Homestay mang ƒë·∫≠m b·∫£n s·∫Øc d√¢n t·ªôc, view n√∫i Fansipan.',
                address: '15 ƒê∆∞·ªùng Fansipan, Th·ªã tr·∫•n Sapa',
                city: 'Sapa',
                province: 'L√†o Cai',
                country: 'Vi·ªát Nam',
                images: [
                    'https://images.unsplash.com/photo-1564013799919-ab600027ffc6?w=800&auto=format&fit=crop&q=60',
                    'https://images.unsplash.com/photo-1564013799919-ab600027ffc6?w=800&auto=format&fit=crop&q=60'
                ],
                price: 800000,
                capacity: 6,
                bedroomCount: 3,
                bathroomCount: 2,
                amenities: ['Wifi', 'B·∫øp chung', 'S∆∞·ªüi', 'L√≤ s∆∞·ªüi'],
                hostId: admin._id,
                isActive: true
            },
            {
                name: 'H·ªôi An Ancient House',
                description: 'Nh√† c·ªï truy·ªÅn th·ªëng trong l√≤ng ph·ªë c·ªï H·ªôi An.',
                address: '25 Nguy·ªÖn Th√°i H·ªçc, Minh An, H·ªôi An',
                city: 'H·ªôi An',
                province: 'Qu·∫£ng Nam',
                country: 'Vi·ªát Nam',
                images: [
                    'https://images.unsplash.com/photo-1564013799919-ab600027ffc6?w=800&auto=format&fit=crop&q=60',
                    'https://images.unsplash.com/photo-1564013799919-ab600027ffc6?w=800&auto=format&fit=crop&q=60'
                ],
                price: 900000,
                capacity: 4,
                bedroomCount: 2,
                bathroomCount: 1,
                amenities: ['Wifi', 'ƒêi·ªÅu h√≤a', 'TV', 'T·ªß l·∫°nh'],
                hostId: admin._id,
                isActive: true
            }
        ];

        // Ki·ªÉm tra xem c√≥ homestay n√†o ch∆∞a
        const existingHomestays = await Homestay.countDocuments();
        
        if (existingHomestays === 0) {
            // Th√™m d·ªØ li·ªáu m·∫´u n·∫øu ch∆∞a c√≥ homestay n√†o
            for (const homestayData of homestays) {
                const homestay = new Homestay(homestayData);
                await homestay.save();
            }
            console.log(`‚úÖ ƒê√£ t·∫°o ${homestays.length} homestay m·∫´u th√†nh c√¥ng.`);
        } else {
            console.log(`‚ÑπÔ∏è ƒê√£ c√≥ ${existingHomestays} homestay trong c∆° s·ªü d·ªØ li·ªáu.`);
        }

        console.log('üéâ Kh·ªüi t·∫°o d·ªØ li·ªáu th√†nh c√¥ng!');
        
        // ƒê√≥ng k·∫øt n·ªëi MongoDB
        await mongoose.connection.close();
        console.log('üëã ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB.');
        
    } catch (error) {
        console.error('‚ùå L·ªói khi kh·ªüi t·∫°o d·ªØ li·ªáu:', error);
    } finally {
        process.exit(0);
    }
}

// Ch·∫°y h√†m kh·ªüi t·∫°o
initializeMongoDBData();
