import nodemailer from 'nodemailer';
import fs from 'fs';
import path from 'path';
import type { IUser } from '../schemas/user.schema';
import "dotenv/config";

class EmailService {
  private transporter: nodemailer.Transporter;
  private fromEmail: string;
  private frontendUrl: string;
  private templateDir: string;

  constructor() {
    // L·∫•y c·∫•u h√¨nh t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
    this.fromEmail = process.env.EMAIL_FROM || 'no-reply@bookingapp.com';
    this.frontendUrl = process.env.FRONTEND_URL || 'http://localhost:5173';
    this.templateDir = path.join(__dirname, '../templates/emails');

    // Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng b·∫Øt bu·ªôc
    if (!process.env.EMAIL_USER || !process.env.EMAIL_PASSWORD) {
      console.error('[EMAIL SERVICE] ‚ùå Thi·∫øu th√¥ng tin x√°c th·ª±c email:', {
        EMAIL_USER: process.env.EMAIL_USER ? 'ƒê√£ c·∫•u h√¨nh' : 'Ch∆∞a c·∫•u h√¨nh',
        EMAIL_PASSWORD: process.env.EMAIL_PASSWORD ? 'ƒê√£ c·∫•u h√¨nh' : 'Ch∆∞a c·∫•u h√¨nh'
      });
      throw new Error('EMAIL_USER v√† EMAIL_PASSWORD l√† b·∫Øt bu·ªôc');
    }

    // Kh·ªüi t·∫°o transporter cho nodemailer
    this.transporter = nodemailer.createTransport({
      service: 'gmail',
      host: 'smtp.gmail.com',
      port: 587,
      secure: false,
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASSWORD
      },
      debug: process.env.NODE_ENV === 'development'
    });

    // Ki·ªÉm tra k·∫øt n·ªëi khi kh·ªüi t·∫°o (trong m√¥i tr∆∞·ªùng development)
    if (process.env.NODE_ENV === 'development') {
      this.verifyConnection();
    }
  }

  private async verifyConnection() {
    try {
      await this.transporter.verify();
      console.log('‚úÖ K·∫øt n·ªëi SMTP ƒë√£ s·∫µn s√†ng');
    } catch (error) {
      console.error('‚ùå L·ªói k·∫øt n·ªëi SMTP:', error);
      console.error('üìß Chi ti·∫øt c·∫•u h√¨nh email:', {
        host: process.env.EMAIL_HOST,
        port: process.env.EMAIL_PORT,
        secure: process.env.EMAIL_SECURE === 'true',
        user: process.env.EMAIL_USER,
        // Hi·ªÉn th·ªã 3 k√Ω t·ª± ƒë·∫ßu ti√™n c·ªßa m·∫≠t kh·∫©u ƒë·ªÉ debug
        pass: process.env.EMAIL_PASSWORD ? `${process.env.EMAIL_PASSWORD.substring(0, 3)}...` : 'kh√¥ng ƒë∆∞·ª£c cung c·∫•p'
      });
    }
  }

  /**
   * ƒê·ªçc file template v√† thay th·∫ø c√°c bi·∫øn
   */
  private async loadTemplate(
    templateName: string,
    replacements: Record<string, string>
  ): Promise<string> {
    try {
      const filePath = path.join(this.templateDir, `${templateName}.html`);
      let content = await fs.promises.readFile(filePath, 'utf8');

      // Thay th·∫ø c√°c bi·∫øn trong template
      Object.keys(replacements).forEach(key => {
        const regex = new RegExp(`{{${key}}}`, 'g');
        content = content.replace(regex, replacements[key]);
      });

      return content;
    } catch (error) {
      console.error(`L·ªói ƒë·ªçc template ${templateName}:`, error);
      throw new Error(`Kh√¥ng th·ªÉ ƒë·ªçc template ${templateName}`);
    }
  }

  /**
   * G·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
   */
  async sendPasswordResetEmail(user: IUser, resetToken: string): Promise<boolean> {
    const resetUrl = `${this.frontendUrl}/reset-password?token=${resetToken}`;

    try {
      const html = await this.loadTemplate('reset-password', {
        firstName: user.firstName,
        resetUrl: resetUrl,
      });

      const mailOptions = {
        from: this.fromEmail,
        to: user.email,
        subject: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u',
        html,
      };

      await this.transporter.sendMail(mailOptions);
      return true;
    } catch (error) {
      console.error('L·ªói g·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:', error);
      return false;
    }
  }

  /**
   * G·ª≠i email x√°c nh·∫≠n ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng
   */
  async sendPasswordResetConfirmation(user: IUser): Promise<boolean> {
    try {
      const html = await this.loadTemplate('reset-password-confirmation', {
        firstName: user.firstName,
      });

      const mailOptions = {
        from: this.fromEmail,
        to: user.email,
        subject: 'M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i',
        html,
      };

      await this.transporter.sendMail(mailOptions);
      return true;
    } catch (error) {
      console.error('L·ªói g·ª≠i email x√°c nh·∫≠n ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:', error);
      return false;
    }
  }

  /**
   * G·ª≠i email x√°c th·ª±c t√†i kho·∫£n
   */
  async sendVerificationEmail(user: IUser, verificationToken: string): Promise<boolean> {
    const verificationUrl = `${this.frontendUrl}/verify-email?token=${verificationToken}`;

    console.log('üîÑ ƒêang chu·∫©n b·ªã g·ª≠i email x√°c th·ª±c cho:', user.email);
    console.log('üîó URL x√°c th·ª±c:', verificationUrl);

    try {
      // Ki·ªÉm tra l·∫°i k·∫øt n·ªëi SMTP tr∆∞·ªõc khi g·ª≠i
      await this.transporter.verify();
      
      // Chu·∫©n b·ªã HTML content
      let html;
      try {
        html = await this.loadTemplate('email-verification', {
          firstName: user.firstName,
          verificationUrl: verificationUrl,
        });
        console.log('‚úÖ ƒê√£ t·∫£i template email-verification th√†nh c√¥ng');
      } catch (error) {
        console.log('‚ö†Ô∏è S·ª≠ d·ª•ng template HTML c∆° b·∫£n thay th·∫ø');
        html = `
          <div>
            <h1>X√°c th·ª±c t√†i kho·∫£n</h1>
            <p>Xin ch√†o ${user.firstName},</p>
            <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n tr√™n h·ªá th·ªëng c·ªßa ch√∫ng t√¥i. Vui l√≤ng nh·∫•p v√†o li√™n k·∫øt d∆∞·ªõi ƒë√¢y ƒë·ªÉ x√°c th·ª±c email c·ªßa b·∫°n:</p>
            <p><a href="${verificationUrl}" style="padding: 10px 15px; background-color: #4CAF50; color: white; text-decoration: none; border-radius: 4px;">X√°c th·ª±c email</a></p>
            <p>Ho·∫∑c b·∫°n c√≥ th·ªÉ sao ch√©p v√† d√°n li√™n k·∫øt n√†y v√†o tr√¨nh duy·ªát:</p>
            <p>${verificationUrl}</p>
            <p>Li√™n k·∫øt s·∫Ω h·∫øt h·∫°n sau 24 gi·ªù.</p>
          </div>
        `;
      }

      console.log('üìß Chu·∫©n b·ªã g·ª≠i email v·ªõi c·∫•u h√¨nh:', {
        from: this.fromEmail,
        to: user.email,
        auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASSWORD ? '***' : 'missing'
        }
      });

      const info = await this.transporter.sendMail({
        from: this.fromEmail,
        to: user.email,
        subject: 'X√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n',
        html,
      });

      console.log('‚úÖ Email x√°c th·ª±c ƒë√£ ƒë∆∞·ª£c g·ª≠i:', info.messageId);
      console.log('üìß Th√¥ng tin chi ti·∫øt:', info);
      return true;
    } catch (error: any) {
      console.error('‚ùå L·ªói g·ª≠i email x√°c th·ª±c:', error);

      if (error.code === 'EAUTH') {
        console.error('üîê L·ªói x√°c th·ª±c: Ki·ªÉm tra l·∫°i EMAIL_USER v√† EMAIL_PASSWORD trong .env');
      } else if (error.code === 'ESOCKET') {
        console.error('üîå L·ªói k·∫øt n·ªëi: Ki·ªÉm tra l·∫°i k·∫øt n·ªëi m·∫°ng v√† c·∫•u h√¨nh SMTP');
      }

      throw error; // Throw error ƒë·ªÉ service g·ªçi ƒë·∫øn c√≥ th·ªÉ x·ª≠ l√Ω
    }
  }

  /**
   * G·ª≠i email x√°c nh·∫≠n x√°c th·ª±c t√†i kho·∫£n th√†nh c√¥ng
   */
  async sendVerificationConfirmation(user: IUser): Promise<boolean> {
    try {
      // S·ª≠ d·ª•ng template hi·ªán c√≥ ho·∫∑c t·∫°o n·ªôi dung email tr·ª±c ti·∫øp
      let html;
      try {
        html = await this.loadTemplate('verification-confirmation', {
          firstName: user.firstName,
        });
      } catch (error) {
        // N·∫øu kh√¥ng c√≥ template, s·ª≠ d·ª•ng HTML c∆° b·∫£n
        html = `
          <div>
            <h1>X√°c th·ª±c t√†i kho·∫£n th√†nh c√¥ng</h1>
            <p>Xin ch√†o ${user.firstName},</p>
            <p>Ch√∫c m·ª´ng! Email c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng.</p>
            <p>B√¢y gi·ªù b·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v√† s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß c√°c t√≠nh nƒÉng c·ªßa h·ªá th·ªëng.</p>
          </div>
        `;
      }

      const mailOptions = {
        from: this.fromEmail,
        to: user.email,
        subject: 'T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng',
        html,
      };

      await this.transporter.sendMail(mailOptions);
      return true;
    } catch (error) {
      console.error('L·ªói g·ª≠i email x√°c nh·∫≠n x√°c th·ª±c:', error);
      return false;
    }
  }

  /**
   * G·ª≠i email x√°c nh·∫≠n ƒë·∫∑t ph√≤ng
   */
  async sendBookingConfirmation(
    user: IUser,
    verificationToken: string,
    bookingDetails: {
      homestayName: string;
      homestayAddress: string;
      checkInDate: Date;
      checkOutDate: Date;
      guestCount: number;
      totalPrice: number;
    }
  ): Promise<boolean> {
    const verificationUrl = `${this.frontendUrl}/booking-verification?token=${verificationToken}`;

    // Format dates to Vietnamese format
    const formatDate = (date: Date) => {
      return new Date(date).toLocaleDateString('vi-VN', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
      });
    };

    try {
      // S·ª≠ d·ª•ng template hi·ªán c√≥ ho·∫∑c t·∫°o n·ªôi dung email tr·ª±c ti·∫øp
      let html;
      try {
        html = await this.loadTemplate('booking-confirmation', {
          firstName: user.firstName,
          verificationUrl: verificationUrl,
          homestayName: bookingDetails.homestayName,
          homestayAddress: bookingDetails.homestayAddress,
          checkInDate: formatDate(bookingDetails.checkInDate),
          checkOutDate: formatDate(bookingDetails.checkOutDate),
          guestCount: bookingDetails.guestCount.toString(),
          totalPrice: bookingDetails.totalPrice.toLocaleString('vi-VN'),
        });
      } catch (error) {
        // N·∫øu kh√¥ng c√≥ template, s·ª≠ d·ª•ng HTML c∆° b·∫£n theo m·∫´u t·ª´ k·∫ø ho·∫°ch
        html = `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #eee;">
            <h2 style="color: #333;">X√°c nh·∫≠n ƒë·∫∑t ph√≤ng c·ªßa b·∫°n t·∫°i ${bookingDetails.homestayName}</h2>
            <p>Xin ch√†o ${user.firstName},</p>
            <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t ph√≤ng t·∫°i ${bookingDetails.homestayName}. Vui l√≤ng x√°c nh·∫≠n ƒë·∫∑t ph√≤ng b·∫±ng c√°ch nh·∫•n v√†o n√∫t d∆∞·ªõi ƒë√¢y:</p>

            <div style="text-align: center; margin: 30px 0;">
              <a href="${verificationUrl}" style="background-color: #4CAF50; color: white; padding: 12px 20px; text-decoration: none; border-radius: 4px; font-weight: bold;">X√ÅC NH·∫¨N ƒê·∫∂T PH√íNG</a>
            </div>

            <div style="background-color: #f9f9f9; padding: 15px; border-radius: 4px; margin-bottom: 20px;">
              <h3 style="margin-top: 0;">Chi ti·∫øt ƒë·∫∑t ph√≤ng:</h3>
              <p><strong>Homestay:</strong> ${bookingDetails.homestayName}</p>
              <p><strong>ƒê·ªãa ch·ªâ:</strong> ${bookingDetails.homestayAddress}</p>
              <p><strong>Ng√†y check-in:</strong> ${formatDate(bookingDetails.checkInDate)}</p>
              <p><strong>Ng√†y check-out:</strong> ${formatDate(bookingDetails.checkOutDate)}</p>
              <p><strong>S·ªë l∆∞·ª£ng kh√°ch:</strong> ${bookingDetails.guestCount}</p>
              <p><strong>T·ªïng gi√° ti·ªÅn:</strong> ${bookingDetails.totalPrice.toLocaleString('vi-VN')} VNƒê</p>
            </div>

            <p>L∆∞u √Ω: Link x√°c nh·∫≠n n√†y s·∫Ω h·∫øt h·∫°n sau 24 gi·ªù.</p>
            <p>N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán ƒë·∫∑t ph√≤ng n√†y, vui l√≤ng b·ªè qua email n√†y.</p>

            <p>Tr√¢n tr·ªçng,<br>
            ƒê·ªôi ng≈© h·ªó tr·ª£ Homestay App</p>
          </div>
        `;
      }

      const mailOptions = {
        from: this.fromEmail,
        to: user.email,
        subject: `X√°c nh·∫≠n ƒë·∫∑t ph√≤ng t·∫°i ${bookingDetails.homestayName}`,
        html,
      };

      await this.transporter.sendMail(mailOptions);
      return true;
    } catch (error) {
      console.error('L·ªói g·ª≠i email x√°c nh·∫≠n ƒë·∫∑t ph√≤ng:', error);
      return false;
    }
  }

  /**
   * G·ª≠i email th√¥ng b√°o ƒë·∫∑t ph√≤ng th√†nh c√¥ng
   */
  async sendBookingSuccessNotification(
    user: IUser,
    bookingDetails: {
      homestayName: string;
      homestayAddress: string;
      checkInDate: Date;
      checkOutDate: Date;
      guestCount: number;
      totalPrice: number;
      bookingId: string;
    }
  ): Promise<boolean> {
    // Format dates to Vietnamese format
    const formatDate = (date: Date) => {
      return new Date(date).toLocaleDateString('vi-VN', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
      });
    };

    try {
      // S·ª≠ d·ª•ng template hi·ªán c√≥ ho·∫∑c t·∫°o n·ªôi dung email tr·ª±c ti·∫øp
      let html;
      try {
        html = await this.loadTemplate('booking-success', {
          firstName: user.firstName,
          homestayName: bookingDetails.homestayName,
          homestayAddress: bookingDetails.homestayAddress,
          checkInDate: formatDate(bookingDetails.checkInDate),
          checkOutDate: formatDate(bookingDetails.checkOutDate),
          guestCount: bookingDetails.guestCount.toString(),
          totalPrice: bookingDetails.totalPrice.toLocaleString('vi-VN'),
          bookingId: bookingDetails.bookingId,
        });
      } catch (error) {
        // N·∫øu kh√¥ng c√≥ template, s·ª≠ d·ª•ng HTML c∆° b·∫£n
        html = `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #eee;">
            <h2 style="color: #333;">ƒê·∫∑t ph√≤ng th√†nh c√¥ng!</h2>
            <p>Xin ch√†o ${user.firstName},</p>
            <p>Ch√∫c m·ª´ng! ƒê·∫∑t ph√≤ng c·ªßa b·∫°n t·∫°i ${bookingDetails.homestayName} ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n th√†nh c√¥ng.</p>

            <div style="background-color: #f9f9f9; padding: 15px; border-radius: 4px; margin: 20px 0;">
              <h3 style="margin-top: 0;">Chi ti·∫øt ƒë·∫∑t ph√≤ng:</h3>
              <p><strong>M√£ ƒë·∫∑t ph√≤ng:</strong> ${bookingDetails.bookingId}</p>
              <p><strong>Homestay:</strong> ${bookingDetails.homestayName}</p>
              <p><strong>ƒê·ªãa ch·ªâ:</strong> ${bookingDetails.homestayAddress}</p>
              <p><strong>Ng√†y check-in:</strong> ${formatDate(bookingDetails.checkInDate)}</p>
              <p><strong>Ng√†y check-out:</strong> ${formatDate(bookingDetails.checkOutDate)}</p>
              <p><strong>S·ªë l∆∞·ª£ng kh√°ch:</strong> ${bookingDetails.guestCount}</p>
              <p><strong>T·ªïng gi√° ti·ªÅn:</strong> ${bookingDetails.totalPrice.toLocaleString('vi-VN')} VNƒê</p>
            </div>

            <p>B·∫°n c√≥ th·ªÉ xem chi ti·∫øt ƒë·∫∑t ph√≤ng v√† l·ªãch s·ª≠ ƒë·∫∑t ph√≤ng c·ªßa m√¨nh trong ph·∫ßn "ƒê·∫∑t ph√≤ng c·ªßa t√¥i" tr√™n trang c√° nh√¢n.</p>

            <p>C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i!</p>

            <p>Tr√¢n tr·ªçng,<br>
            ƒê·ªôi ng≈© h·ªó tr·ª£ Homestay App</p>
          </div>
        `;
      }

      const mailOptions = {
        from: this.fromEmail,
        to: user.email,
        subject: `ƒê·∫∑t ph√≤ng th√†nh c√¥ng t·∫°i ${bookingDetails.homestayName}`,
        html,
      };

      await this.transporter.sendMail(mailOptions);
      return true;
    } catch (error) {
      console.error('L·ªói g·ª≠i email th√¥ng b√°o ƒë·∫∑t ph√≤ng th√†nh c√¥ng:', error);
      return false;
    }
  }

  /**
   * G·ª≠i email v·ªõi n·ªôi dung t√πy ch·ªânh
   */
  async sendMail(options: {
    to: string;
    subject: string;
    html: string;
    attachments?: Array<{
      filename: string;
      path: string;
      cid?: string;
    }>;
  }): Promise<boolean> {
    try {
      const mailOptions = {
        from: this.fromEmail,
        ...options
      };

      await this.transporter.sendMail(mailOptions);
      return true;
    } catch (error) {
      console.error('L·ªói g·ª≠i email:', error);
      return false;
    }
  }
}

export default new EmailService();
