import nodemailer from 'nodemailer';
import { User } from '../models/user';
import fs from 'fs';
import path from 'path';

class EmailService {
  private transporter: nodemailer.Transporter;
  private fromEmail: string;
  private frontendUrl: string;
  private templateDir: string;

  constructor() {
    // L·∫•y c·∫•u h√¨nh t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
    this.fromEmail = process.env.EMAIL_FROM || 'no-reply@bookingapp.com';
    this.frontendUrl = process.env.FRONTEND_URL || 'http://localhost:5173';
    this.templateDir = path.join(__dirname, '../templates/emails');

    console.log('[EMAIL SERVICE] Kh·ªüi t·∫°o v·ªõi c·∫•u h√¨nh:');
    console.log(`- EMAIL_HOST: ${process.env.EMAIL_HOST}`);
    console.log(`- EMAIL_PORT: ${process.env.EMAIL_PORT}`);
    console.log(`- EMAIL_USER: ${process.env.EMAIL_USER}`);
    console.log(`- FROM EMAIL: ${this.fromEmail}`);
    console.log(`- FRONTEND URL: ${this.frontendUrl}`);
    console.log(`- Template Directory: ${this.templateDir}`);

    // Kh·ªüi t·∫°o transporter cho nodemailer
    this.transporter = nodemailer.createTransport({
      host: process.env.EMAIL_HOST || 'smtp.gmail.com',
      port: parseInt(process.env.EMAIL_PORT || '587'),
      secure: process.env.EMAIL_SECURE === 'true',
      auth: {
        user: process.env.EMAIL_USER || '',
        pass: process.env.EMAIL_PASSWORD || '',
      },
    });

    // Ki·ªÉm tra k·∫øt n·ªëi khi kh·ªüi t·∫°o (trong m√¥i tr∆∞·ªùng development)
    if (process.env.NODE_ENV === 'development') {
      this.verifyConnection();
    }
  }

  private async verifyConnection() {
    try {
      await this.transporter.verify();
      console.log('[EMAIL SERVICE] ‚úÖ K·∫øt n·ªëi SMTP ƒë√£ s·∫µn s√†ng');
    } catch (error) {
      console.error('[EMAIL SERVICE] ‚ùå L·ªói k·∫øt n·ªëi SMTP:', error);
    }
  }

  /**
   * ƒê·ªçc file template v√† thay th·∫ø c√°c bi·∫øn
   */
  private async loadTemplate(
    templateName: string,
    replacements: Record<string, string>
  ): Promise<string> {
    try {
      console.log(`[EMAIL SERVICE] ƒêang t·∫£i template: ${templateName}`);
      const filePath = path.join(this.templateDir, `${templateName}.html`);
      console.log(`[EMAIL SERVICE] ƒê∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß ƒë·∫øn template: ${filePath}`);

      if (!fs.existsSync(filePath)) {
        console.error(`[EMAIL SERVICE] ‚ùå Template kh√¥ng t·ªìn t·∫°i: ${filePath}`);
        throw new Error(`Template ${templateName} kh√¥ng t·ªìn t·∫°i`);
      }

      let content = await fs.promises.readFile(filePath, 'utf8');
      console.log(`[EMAIL SERVICE] ƒê√£ ƒë·ªçc template th√†nh c√¥ng (${content.length} bytes)`);

      // Thay th·∫ø c√°c bi·∫øn trong template
      Object.keys(replacements).forEach(key => {
        const regex = new RegExp(`{{${key}}}`, 'g');
        content = content.replace(regex, replacements[key]);
      });

      return content;
    } catch (error) {
      console.error(`[EMAIL SERVICE] ‚ùå L·ªói ƒë·ªçc template ${templateName}:`, error);
      throw new Error(`Kh√¥ng th·ªÉ ƒë·ªçc template ${templateName}`);
    }
  }

  /**
   * G·ª≠i email x√°c th·ª±c t√†i kho·∫£n
   */
  async sendVerificationEmail(user: User, verificationToken: string): Promise<boolean> {
    const verificationUrl = `${this.frontendUrl}/verify-email?token=${verificationToken}`;
    console.log(`[EMAIL SERVICE] üîÑ ƒêang g·ª≠i email x√°c th·ª±c cho: ${user.email}`);
    console.log(`[EMAIL SERVICE] üîó URL x√°c th·ª±c: ${verificationUrl}`);

    try {
      // S·ª≠ d·ª•ng template hi·ªán c√≥ ho·∫∑c t·∫°o n·ªôi dung email tr·ª±c ti·∫øp
      let html;
      try {
        html = await this.loadTemplate('email-verification', {
          firstName: user.firstName,
          verificationUrl: verificationUrl,
        });
      } catch (error) {
        console.error('[EMAIL SERVICE] ‚ùå L·ªói khi t·∫£i template, s·ª≠ d·ª•ng HTML c∆° b·∫£n', error);

        // N·∫øu kh√¥ng c√≥ template, s·ª≠ d·ª•ng HTML c∆° b·∫£n
        html = `
          <div>
            <h1>X√°c th·ª±c t√†i kho·∫£n</h1>
            <p>Xin ch√†o ${user.firstName},</p>
            <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n tr√™n h·ªá th·ªëng c·ªßa ch√∫ng t√¥i. Vui l√≤ng nh·∫•p v√†o li√™n k·∫øt d∆∞·ªõi ƒë√¢y ƒë·ªÉ x√°c th·ª±c email c·ªßa b·∫°n:</p>
            <p><a href="${verificationUrl}" style="padding: 10px 15px; background-color: #4CAF50; color: white; text-decoration: none; border-radius: 4px;">X√°c th·ª±c email</a></p>
            <p>Ho·∫∑c b·∫°n c√≥ th·ªÉ sao ch√©p v√† d√°n li√™n k·∫øt n√†y v√†o tr√¨nh duy·ªát:</p>
            <p>${verificationUrl}</p>
            <p>Li√™n k·∫øt s·∫Ω h·∫øt h·∫°n sau 24 gi·ªù.</p>
          </div>
        `;
      }

      console.log(`[EMAIL SERVICE] üîÑ T·∫°o mailOptions cho email x√°c th·ª±c`);
      const mailOptions = {
        from: this.fromEmail,
        to: user.email,
        subject: 'X√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n',
        html
      };

      console.log(`[EMAIL SERVICE] üîÑ ƒêang g·ª≠i email x√°c th·ª±c ƒë·∫øn: ${user.email}`);
      const info = await this.transporter.sendMail(mailOptions);
      console.log(`[EMAIL SERVICE] ‚úÖ Email x√°c th·ª±c ƒë√£ ƒë∆∞·ª£c g·ª≠i: ${info.messageId}`);
      console.log(`[EMAIL SERVICE] üìß Th√¥ng tin email g·ª≠i:`, info);
      return true;
    } catch (error: any) {
      console.error('[EMAIL SERVICE] ‚ùå L·ªói g·ª≠i email x√°c th·ª±c:', error);

      if (error.code === 'EAUTH') {
        console.error('[EMAIL SERVICE] üîê L·ªói x√°c th·ª±c: Ki·ªÉm tra l·∫°i username v√† password trong .env');
      } else if (error.code === 'ESOCKET') {
        console.error('[EMAIL SERVICE] üîå L·ªói k·∫øt n·ªëi: Ki·ªÉm tra l·∫°i host v√† port trong .env');
      } else if (error.code === 'EENVELOPE') {
        console.error('[EMAIL SERVICE] üìß L·ªói ƒë·ªãa ch·ªâ email: Ki·ªÉm tra l·∫°i ƒë·ªãa ch·ªâ email ng∆∞·ªùi g·ª≠i/nh·∫≠n');
        console.error(`[EMAIL SERVICE] Ng∆∞·ªùi g·ª≠i: ${this.fromEmail}, Ng∆∞·ªùi nh·∫≠n: ${user.email}`);
      }

      return false;
    }
  }

  /**
   * G·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
   */
  async sendPasswordResetEmail(user: User, resetToken: string): Promise<boolean> {
    const resetUrl = `${this.frontendUrl}/reset-password?token=${resetToken}`;
    console.log(`[EMAIL SERVICE] üîÑ ƒêang g·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho: ${user.email}`);

    try {
      const html = await this.loadTemplate('reset-password', {
        firstName: user.firstName,
        resetUrl: resetUrl,
      });

      const mailOptions = {
        from: this.fromEmail,
        to: user.email,
        subject: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u',
        html,
      };

      const info = await this.transporter.sendMail(mailOptions);
      console.log(`[EMAIL SERVICE] ‚úÖ Email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i: ${info.messageId}`);
      return true;
    } catch (error: any) {
      console.error('[EMAIL SERVICE] ‚ùå L·ªói g·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:', error);
      return false;
    }
  }

  /**
   * H√†m chung ƒë·ªÉ g·ª≠i email
   */
  async sendMail(options: {
    to: string;
    subject: string;
    html: string;
  }): Promise<boolean> {
    try {
      console.log(`[EMAIL SERVICE] üîÑ ƒêang g·ª≠i email ƒë·∫øn: ${options.to}`);

      const mailOptions = {
        from: this.fromEmail,
        ...options
      };

      const info = await this.transporter.sendMail(mailOptions);
      console.log(`[EMAIL SERVICE] ‚úÖ Email ƒë√£ ƒë∆∞·ª£c g·ª≠i: ${info.messageId}`);
      return true;
    } catch (error: any) {
      console.error('[EMAIL SERVICE] ‚ùå L·ªói g·ª≠i email:', error);
      return false;
    }
  }
}

export default new EmailService();
