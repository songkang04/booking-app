import bcrypt from 'bcrypt';
import crypto from 'crypto';
import jwt from 'jsonwebtoken';
import emailService from '../config/mail';
import { User, IUser, UserRole } from '../schemas/user.schema';
import { AUTH_CONSTANTS } from '../utils/constant';

interface ForgotPasswordResult {
  user?: IUser;
  resetToken?: string;
  emailSent: boolean;
  onCooldown: boolean;
  cooldownMinutes?: number;
}

class AuthService {
  async register(
    firstName: string,
    lastName: string,
    email: string,
    password: string
  ): Promise<IUser> {
    console.log(`[AUTH SERVICE] ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi: ${email}`);

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      console.log(`[AUTH SERVICE] ‚ö†Ô∏è Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng: ${email}`);
      throw new Error('Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng');
    }

    // T·∫°o token x√°c th·ª±c email
    const verificationToken = crypto.randomBytes(20).toString('hex');
    console.log(`[AUTH SERVICE] ‚úÖ ƒê√£ t·∫°o token x√°c th·ª±c: ${verificationToken.substring(0, 10)}...`);

    // Thi·∫øt l·∫≠p th·ªùi gian h·∫øt h·∫°n (24 gi·ªù)
    const expiryDate = new Date();
    expiryDate.setHours(expiryDate.getHours() + 24);

    // T·∫°o ng∆∞·ªùi d√πng m·ªõi
    const user = new User({
      firstName,
      lastName,
      email,
      password, // S·∫Ω ƒë∆∞·ª£c m√£ h√≥a b·ªüi middleware pre save c·ªßa schema
      role: UserRole.USER,
      emailVerificationToken: verificationToken,
      emailVerificationExpires: expiryDate,
      isEmailVerified: false
    });

    console.log(`[AUTH SERVICE] üîÑ ƒêang l∆∞u ng∆∞·ªùi d√πng v√†o database...`);
    const savedUser = await user.save();
    console.log(`[AUTH SERVICE] ‚úÖ ƒê√£ l∆∞u ng∆∞·ªùi d√πng: ID=${savedUser._id}`);

    // G·ª≠i email x√°c th·ª±c
    console.log(`[AUTH SERVICE] üîÑ B·∫Øt ƒë·∫ßu g·ª≠i email x√°c th·ª±c...`);
    try {
      const emailSent = await emailService.sendVerificationEmail(savedUser, verificationToken);
      if (emailSent) {
        console.log(`[AUTH SERVICE] ‚úÖ ƒê√£ g·ª≠i email x√°c th·ª±c th√†nh c√¥ng cho: ${email}`);
      } else {
        console.error(`[AUTH SERVICE] ‚ùå Kh√¥ng th·ªÉ g·ª≠i email x√°c th·ª±c cho: ${email}`);
      }
    } catch (error) {
      console.error(`[AUTH SERVICE] ‚ùå L·ªói g·ª≠i email x√°c th·ª±c:`, error);
    }

    return savedUser;
  }

  async login(email: string, password: string): Promise<IUser> {
    // T√¨m ng∆∞·ªùi d√πng v√† l·∫•y c·∫£ m·∫≠t kh·∫©u ƒë·ªÉ x√°c th·ª±c
    const user = await User.findOne({ email }).select('+password');

    if (!user) {
      throw new Error('Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá.');
    }

    // X√°c th·ª±c m·∫≠t kh·∫©u
    const isPasswordValid = await user.comparePassword(password);
    if (!isPasswordValid) {
      throw new Error('Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá');
    }

    return user;
  }

  async getUserById(userId: string): Promise<IUser | null> {
    return User.findById(userId);
  }

  generateToken(user: IUser): string {
    const payload = {
      userId: user._id,
      email: user.email,
      role: user.role,
    };

    const secret = process.env.JWT_SECRET || 'your-secret-key';
    const expiresIn = '24h';

    return jwt.sign(payload, secret, { expiresIn });
  }

  async forgotPassword(email: string): Promise<ForgotPasswordResult> {
    // T√¨m ng∆∞·ªùi d√πng theo email
    const user = await User.findOne({ email });

    // N·∫øu kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng
    if (!user) {
      return { emailSent: false, onCooldown: false };
    }

    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ƒëang trong th·ªùi gian ch·ªù kh√¥ng
    const now = new Date();
    if (user.passwordResetExpires) {
      const cooldownMinutes = AUTH_CONSTANTS.PASSWORD_RESET_COOLDOWN_MINUTES;
      const cooldownTime = new Date(now.getTime() - cooldownMinutes * 60 * 1000);

      if (user.passwordResetExpires > cooldownTime) {
        // V·∫´n ƒëang trong th·ªùi gian ch·ªù
        const remainingMinutes = Math.ceil((user.passwordResetExpires.getTime() - now.getTime()) / (60 * 1000));
        return {
          emailSent: false,
          onCooldown: true,
          cooldownMinutes: remainingMinutes
        };
      }
    }

    // T·∫°o token ng·∫´u nhi√™n
    const resetToken = crypto.randomBytes(20).toString('hex');

    // Thi·∫øt l·∫≠p th·ªùi gian h·∫øt h·∫°n
    const expiryHours = AUTH_CONSTANTS.PASSWORD_RESET_TOKEN_EXPIRY_HOURS;
    const expiryDate = new Date(now.getTime() + expiryHours * 60 * 60 * 1000);

    // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
    user.passwordResetToken = resetToken;
    user.passwordResetExpires = expiryDate;
    await user.save();

    // G·ª≠i email
    const emailSent = await emailService.sendPasswordResetEmail(user, resetToken);

    return {
      user,
      resetToken,
      emailSent,
      onCooldown: false
    };
  }

  async resetPassword(token: string, password: string): Promise<IUser> {
    // T√¨m ng∆∞·ªùi d√πng v·ªõi token h·ª£p l·ªá v√† ch∆∞a h·∫øt h·∫°n
    const user = await User.findOne({
      passwordResetToken: token,
      passwordResetExpires: { $gt: new Date() }
    });

    if (!user) {
      throw new Error('Token ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
    }

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
    user.password = password; // S·∫Ω ƒë∆∞·ª£c m√£ h√≥a b·ªüi middleware pre save
    user.passwordResetToken = undefined;
    user.passwordResetExpires = undefined;

    await user.save();

    // G·ª≠i email x√°c nh·∫≠n
    await emailService.sendPasswordResetConfirmation(user);

    return user;
  }

  async verifyEmail(token: string): Promise<IUser> {
    // T√¨m ng∆∞·ªùi d√πng v·ªõi token h·ª£p l·ªá v√† ch∆∞a h·∫øt h·∫°n
    const user = await User.findOne({
      emailVerificationToken: token,
      emailVerificationExpires: { $gt: new Date() }
    });

    if (!user) {
      throw new Error('Token x√°c th·ª±c kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i x√°c th·ª±c
    user.isEmailVerified = true;
    user.emailVerificationToken = undefined;
    user.emailVerificationExpires = undefined;

    await user.save();

    // G·ª≠i email x√°c nh·∫≠n
    try {
      await emailService.sendVerificationConfirmation(user);
    } catch (error) {
      console.error('L·ªói g·ª≠i email x√°c nh·∫≠n:', error);
    }

    return user;
  }
}

export default new AuthService();
