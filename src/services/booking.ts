import { Repository, MoreThan } from 'typeorm';
import { AppDataSource } from '../config/database';
import { Booking, BookingStatus, PaymentStatus } from '../models/booking';
import { User } from '../models/user';
import { Homestay } from '../models/homestay';
import { CreateBookingDto, UpdateBookingStatusDto, UpdatePaymentStatusDto } from '../dtos/booking.dto';
import crypto from 'crypto';
import emailService from '../config/mail';
import paymentService from './payment';

export class BookingService {
  private bookingRepository: Repository<Booking>;
  private userRepository: Repository<User>;
  private homestayRepository: Repository<Homestay>;

  constructor() {
    this.bookingRepository = AppDataSource.getRepository(Booking);
    this.userRepository = AppDataSource.getRepository(User);
    this.homestayRepository = AppDataSource.getRepository(Homestay);
  }

  /**
   * T·∫°o ƒë·∫∑t ph√≤ng m·ªõi v√† g·ª≠i email x√°c nh·∫≠n
   */
  async createBooking(
    userId: number,
    createBookingDto: CreateBookingDto
  ): Promise<Booking> {
    // Ki·ªÉm tra ng∆∞·ªùi d√πng t·ªìn t·∫°i
    const user = await this.userRepository.findOneBy({ id: userId });
    if (!user) {
      throw new Error('Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i');
    }

    // Ki·ªÉm tra homestay t·ªìn t·∫°i
    const homestayId = createBookingDto.homestayId;
    const homestay = await this.homestayRepository.findOneBy({
      id: homestayId,
    });
    if (!homestay) {
      throw new Error('Homestay kh√¥ng t·ªìn t·∫°i');
    }

    // Ki·ªÉm tra ng√†y check-in ph·∫£i tr∆∞·ªõc ng√†y check-out
    if (createBookingDto.checkInDate >= createBookingDto.checkOutDate) {
      throw new Error('Ng√†y check-in ph·∫£i tr∆∞·ªõc ng√†y check-out');
    }

    // Ki·ªÉm tra ng√†y check-in ph·∫£i t·ª´ h√¥m nay tr·ªü ƒëi
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    if (new Date(createBookingDto.checkInDate) < today) {
      throw new Error('Ng√†y check-in ph·∫£i t·ª´ h√¥m nay tr·ªü ƒëi');
    }

    // Ki·ªÉm tra th·ªùi gian ƒë·∫∑t ph√≤ng kh√¥ng qu√° 365 ng√†y (1 nƒÉm)
    const checkInDate = new Date(createBookingDto.checkInDate);
    const checkOutDate = new Date(createBookingDto.checkOutDate);
    const diffTime = Math.abs(checkOutDate.getTime() - checkInDate.getTime());
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

    if (diffDays > 365) {
      throw new Error('Th·ªùi gian ƒë·∫∑t ph√≤ng kh√¥ng ƒë∆∞·ª£c qu√° 365 ng√†y');
    }

    // T√≠nh t·ªïng gi√° ti·ªÅn v√† ƒë·∫£m b·∫£o kh√¥ng v∆∞·ª£t qu√° gi·ªõi h·∫°n c·ªßa decimal(10,2)
    const maxPrice = 99999999.99; // Gi·ªõi h·∫°n c·ªßa decimal(10,2) l√† 8 ch·ªØ s·ªë ph·∫ßn nguy√™n v√† 2 ch·ªØ s·ªë ph·∫ßn th·∫≠p ph√¢n
    const basePrice = homestay.price * diffDays;
    const totalPrice = Math.min(basePrice, maxPrice);

    // T·∫°o token x√°c nh·∫≠n
    const verificationToken = crypto.randomBytes(32).toString('hex');
    const expiryDate = new Date();
    expiryDate.setHours(expiryDate.getHours() + 24); // H·∫øt h·∫°n sau 24 gi·ªù

    // T·∫°o ƒë·∫∑t ph√≤ng m·ªõi
    const booking = new Booking();
    booking.userId = userId;
    booking.homestayId = homestayId;
    booking.checkInDate = checkInDate;
    booking.checkOutDate = checkOutDate;
    booking.guestCount = createBookingDto.guestCount;
    booking.totalPrice = totalPrice;
    booking.status = BookingStatus.PENDING;
    booking.notes = createBookingDto.notes || '';
    booking.verificationToken = verificationToken;
    booking.expiryDate = expiryDate;

    // L∆∞u ƒë·∫∑t ph√≤ng
    const savedBooking = await this.bookingRepository.save(booking);
    console.log("üöÄ ~ BookingService ~ savedBooking:", savedBooking)

    // G·ª≠i email x√°c nh·∫≠n
    await emailService.sendBookingConfirmation(user, verificationToken, {
      homestayName: homestay.name,
      homestayAddress: homestay.address + (homestay.location ? ', ' + homestay.location : ''),
      checkInDate: checkInDate,
      checkOutDate: checkOutDate,
      guestCount: createBookingDto.guestCount,
      totalPrice: totalPrice,
    });

    return savedBooking;
  }

  /**
   * L·∫•y danh s√°ch ƒë·∫∑t ph√≤ng c·ªßa ng∆∞·ªùi d√πng
   */
  async getUserBookings(userId: number): Promise<Booking[]> {
    return this.bookingRepository.find({
      where: { userId },
      relations: ['homestay'],
      order: { createdAt: 'DESC' },
    });
  }

  /**
   * L·∫•y chi ti·∫øt ƒë·∫∑t ph√≤ng
   */
  async getBookingById(bookingId: string): Promise<Booking> {
    const booking = await this.bookingRepository.findOne({
      where: { id: bookingId },
      relations: ['homestay', 'user'],
    });

    if (!booking) {
      throw new Error('ƒê·∫∑t ph√≤ng kh√¥ng t·ªìn t·∫°i');
    }

    return booking;
  }

  /**
   * X√°c nh·∫≠n ƒë·∫∑t ph√≤ng
   */
  async verifyBooking(token: string): Promise<Booking> {
    // T√¨m ƒë·∫∑t ph√≤ng theo token v√† ch∆∞a h·∫øt h·∫°n
    const now = new Date();
    const booking = await this.bookingRepository.findOne({
      where: {
        verificationToken: token,
        expiryDate: MoreThan(now),
        status: BookingStatus.PENDING,
      },
      relations: ['homestay', 'user'],
    });

    if (!booking) {
      throw new Error(
        'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n ho·∫∑c ƒë·∫∑t ph√≤ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n'
      );
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë·∫∑t ph√≤ng th√†nh CONFIRMED
    booking.status = BookingStatus.CONFIRMED;
    booking.verificationToken = ''; // X√≥a token sau khi x√°c nh·∫≠n
    const updatedBooking = await this.bookingRepository.save(booking);

    // G·ª≠i email th√¥ng b√°o ƒë·∫∑t ph√≤ng th√†nh c√¥ng
    await emailService.sendBookingSuccessNotification(booking.user, {
      homestayName: booking.homestay.name,
      homestayAddress: booking.homestay.address + (booking.homestay.location ? ', ' + booking.homestay.location : ''),
      checkInDate: booking.checkInDate,
      checkOutDate: booking.checkOutDate,
      guestCount: booking.guestCount,
      totalPrice: booking.totalPrice,
      bookingId: booking.id,
    });

    // T·∫°o th√¥ng tin thanh to√°n v√† m√£ QR cho ƒë·∫∑t ph√≤ng
    try {
      const bookingWithPayment = await paymentService.generatePaymentInfo(updatedBooking.id);
      return bookingWithPayment;
    } catch (error) {
      console.error('L·ªói khi t·∫°o th√¥ng tin thanh to√°n:', error);
      return updatedBooking;
    }
  }

  /**
   * C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë·∫∑t ph√≤ng
   */
  async updateBookingStatus(
    bookingId: string,
    updateStatusDto: UpdateBookingStatusDto
  ): Promise<Booking> {
    const booking = await this.bookingRepository.findOneBy({ id: bookingId });

    if (!booking) {
      throw new Error('ƒê·∫∑t ph√≤ng kh√¥ng t·ªìn t·∫°i');
    }

    booking.status = updateStatusDto.status;
    return this.bookingRepository.save(booking);
  }

  /**
   * C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n
   */
  async updatePaymentStatus(
    bookingId: string,
    updatePaymentStatusDto: UpdatePaymentStatusDto
  ): Promise<Booking> {
    const booking = await this.bookingRepository.findOneBy({ id: bookingId });

    if (!booking) {
      throw new Error('ƒê·∫∑t ph√≤ng kh√¥ng t·ªìn t·∫°i');
    }

    booking.paymentStatus = updatePaymentStatusDto.paymentStatus;

    if (updatePaymentStatusDto.paymentReference) {
      booking.paymentReference = updatePaymentStatusDto.paymentReference;
    }

    if (updatePaymentStatusDto.notes) {
      booking.notes = booking.notes
        ? `${booking.notes}\n\nC·∫≠p nh·∫≠t thanh to√°n: ${updatePaymentStatusDto.notes}`
        : `C·∫≠p nh·∫≠t thanh to√°n: ${updatePaymentStatusDto.notes}`;
    }

    return this.bookingRepository.save(booking);
  }

  /**
   * Kh·ªüi t·∫°o quy tr√¨nh thanh to√°n cho ƒë·∫∑t ph√≤ng
   */
  async initiatePayment(bookingId: string): Promise<Booking> {
    const booking = await this.getBookingById(bookingId);

    if (booking.status !== BookingStatus.CONFIRMED) {
      throw new Error('ƒê·∫∑t ph√≤ng ch∆∞a ƒë∆∞·ª£c x√°c nh·∫≠n');
    }

    if (booking.paymentStatus !== PaymentStatus.UNPAID && booking.paymentStatus !== PaymentStatus.PENDING_VERIFICATION) {
      throw new Error('ƒê·∫∑t ph√≤ng ƒë√£ ƒë∆∞·ª£c thanh to√°n ho·∫∑c ƒëang trong qu√° tr√¨nh thanh to√°n');
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë·∫∑t ph√≤ng
    booking.status = BookingStatus.PAYMENT_PENDING;
    await this.bookingRepository.save(booking);

    // T·∫°o th√¥ng tin thanh to√°n v√† m√£ QR cho ƒë·∫∑t ph√≤ng
    return await paymentService.generatePaymentInfo(bookingId);
  }

  /**
   * L·∫•y th√¥ng tin thanh to√°n c·ªßa ƒë·∫∑t ph√≤ng
   */
  async getPaymentInfo(bookingId: string): Promise<Booking> {
    const booking = await this.bookingRepository.findOne({
      where: { id: bookingId },
      select: [
        'id', 'totalPrice', 'paymentStatus', 'paymentMethod',
        'paymentReference', 'paymentQrCode', 'paymentDate', 'paymentVerifiedAt'
      ]
    });

    if (!booking) {
      throw new Error('ƒê·∫∑t ph√≤ng kh√¥ng t·ªìn t·∫°i');
    }

    return booking;
  }

  /**
   * L·∫•y t·∫•t c·∫£ ƒë·∫∑t ph√≤ng (cho admin)
   */
  async getAllBookings(): Promise<Booking[]> {
    return this.bookingRepository.find({
      relations: ['homestay', 'user'],
      order: { createdAt: 'DESC' }
    });
  }

  /**
   * L·∫•y ƒë·∫∑t ph√≤ng theo tr·∫°ng th√°i
   */
  async getBookingsByStatus(status: BookingStatus): Promise<Booking[]> {
    return this.bookingRepository.find({
      where: { status },
      relations: ['homestay', 'user'],
      order: { createdAt: 'DESC' }
    });
  }

  /**
   * ƒê·∫øm s·ªë ƒë·∫∑t ph√≤ng theo tr·∫°ng th√°i
   */
  async countBookingsByStatus(status: BookingStatus): Promise<number> {
    return this.bookingRepository.count({
      where: { status }
    });
  }

  /**
   * T√≠nh t·ªïng doanh thu t·ª´ c√°c ƒë·∫∑t ph√≤ng ƒë√£ thanh to√°n
   */
  async calculateTotalRevenue(): Promise<number> {
    const result = await this.bookingRepository
      .createQueryBuilder('booking')
      .select('SUM(booking.totalPrice)', 'total')
      .where('booking.paymentStatus = :status', { status: PaymentStatus.PAID })
      .getRawOne();

    return result?.total || 0;
  }

  /**
   * L·∫•y c√°c ƒë·∫∑t ph√≤ng m·ªõi nh·∫•t ƒëang ch·ªù x√°c nh·∫≠n thanh to√°n
   */
  async getRecentPendingPayments(limit: number): Promise<Booking[]> {
    return this.bookingRepository.find({
      where: { paymentStatus: PaymentStatus.PENDING_VERIFICATION },
      relations: ['homestay', 'user'],
      order: { createdAt: 'DESC' },
      take: limit
    });
  }

  /**
   * Admin c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë·∫∑t ph√≤ng
   */
  async adminUpdateBookingStatus(
    bookingId: string,
    status: string | BookingStatus,
    notes?: string
  ): Promise<Booking> {
    const booking = await this.getBookingById(bookingId);

    // Convert string status to enum if needed
    if (typeof status === 'string') {
      // Check if the string is a valid enum value
      if (Object.values(BookingStatus).includes(status as BookingStatus)) {
        booking.status = status as BookingStatus;
      } else {
        throw new Error(`Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá: ${status}`);
      }
    } else {
      booking.status = status;
    }

    if (notes) {
      booking.notes = booking.notes
        ? `${booking.notes}\n\nAdmin note: ${notes}`
        : `Admin note: ${notes}`;
    }

    return this.bookingRepository.save(booking);
  }

  /**
   * X√°c nh·∫≠n ng∆∞·ªùi d√πng ƒë√£ thanh to√°n v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh ƒëang ch·ªù x√°c minh
   */
  async confirmUserPayment(userId: number, bookingId: string): Promise<Booking> {
    // Ki·ªÉm tra booking t·ªìn t·∫°i
    const booking = await this.bookingRepository.findOne({
      where: { id: bookingId },
      relations: ['user', 'homestay']
    });

    if (!booking) {
      throw new Error('ƒê·∫∑t ph√≤ng kh√¥ng t·ªìn t·∫°i');
    }

    // Ki·ªÉm tra booking thu·ªôc v·ªÅ ng∆∞·ªùi d√πng
    if (booking.userId !== userId) {
      throw new Error('B·∫°n kh√¥ng c√≥ quy·ªÅn x√°c nh·∫≠n thanh to√°n cho ƒë·∫∑t ph√≤ng n√†y');
    }

    // Ki·ªÉm tra tr·∫°ng th√°i booking
    if (booking.status !== BookingStatus.CONFIRMED) {
      throw new Error('ƒê·∫∑t ph√≤ng ch∆∞a ƒë∆∞·ª£c x√°c nh·∫≠n');
    }

    // Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n
    if (booking.paymentStatus !== PaymentStatus.PENDING) {
      if (booking.paymentStatus === PaymentStatus.PAID) {
        throw new Error('ƒê·∫∑t ph√≤ng ƒë√£ ƒë∆∞·ª£c thanh to√°n');
      }

      if (booking.paymentStatus === PaymentStatus.WAITING_APPROVAL) {
        throw new Error('ƒê·∫∑t ph√≤ng ƒëang ch·ªù x√°c nh·∫≠n thanh to√°n');
      }

      throw new Error('Tr·∫°ng th√°i ƒë·∫∑t ph√≤ng kh√¥ng h·ª£p l·ªá ƒë·ªÉ x√°c nh·∫≠n thanh to√°n');
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n th√†nh ƒëang ch·ªù x√°c minh
    booking.paymentStatus = PaymentStatus.WAITING_APPROVAL;
    booking.paymentConfirmedAt = new Date();

    // L∆∞u l·∫°i th√¥ng tin booking
    await this.bookingRepository.save(booking);

    // G·ª≠i email th√¥ng b√°o cho admin v·ªÅ vi·ªác c√≥ thanh to√°n ch·ªù x√°c nh·∫≠n
    await this.notifyAdminAboutPaymentConfirmation(booking);

    return booking;
  }

  /**
   * G·ª≠i th√¥ng b√°o cho admin v·ªÅ vi·ªác c√≥ thanh to√°n ch·ªù x√°c nh·∫≠n
   */
  private async notifyAdminAboutPaymentConfirmation(booking: Booking): Promise<void> {
    try {
      // L·∫•y th√¥ng tin user v√† homestay
      const user = booking.user;
      const homestay = booking.homestay;

      if (!user || !homestay) {
        console.error('Thi·∫øu th√¥ng tin user ho·∫∑c homestay khi g·ª≠i email th√¥ng b√°o thanh to√°n');
        return;
      }

      // Chu·∫©n b·ªã n·ªôi dung HTML cho email
      const htmlContent = `
        <h1>Th√¥ng b√°o: C√≥ thanh to√°n m·ªõi ƒëang ch·ªù x√°c nh·∫≠n</h1>
        <p>Booking ID: <strong>${booking.id}</strong></p>
        <p>Kh√°ch h√†ng: <strong>${user.fullName}</strong> (${user.email})</p>
        <p>Homestay: <strong>${homestay.name}</strong> (${homestay.address})</p>
        <p>S·ªë ti·ªÅn: <strong>${booking.totalPrice.toLocaleString('vi-VN')} VND</strong></p>
        <p>M√£ tham chi·∫øu: <strong>${booking.paymentReference || 'N/A'}</strong></p>
        <p>Th·ªùi gian x√°c nh·∫≠n: <strong>${booking.paymentConfirmedAt?.toLocaleString('vi-VN') || 'N/A'}</strong></p>
        <p>Vui l√≤ng truy c·∫≠p <a href="${process.env.ADMIN_URL || 'http://localhost:5173'}/admin/payments">h·ªá th·ªëng qu·∫£n tr·ªã</a> ƒë·ªÉ x√°c th·ª±c thanh to√°n n√†y.</p>
      `;

      // G·ª≠i email th√¥ng b√°o cho admin
      await emailService.sendMail({
        to: process.env.ADMIN_EMAIL || 'admin@hdhomestay.com',
        subject: 'C√≥ thanh to√°n m·ªõi ch·ªù x√°c nh·∫≠n',
        html: htmlContent
      });
    } catch (error) {
      console.error('L·ªói khi g·ª≠i email th√¥ng b√°o cho admin:', error);
      // Kh√¥ng n√©m l·ªói ra ngo√†i v√¨ kh√¥ng mu·ªën ·∫£nh h∆∞·ªüng ƒë·∫øn lu·ªìng x·ª≠ l√Ω ch√≠nh
    }
  }

  /**
   * L·∫•y danh s√°ch ƒë·∫∑t ph√≤ng theo tr·∫°ng th√°i thanh to√°n
   * @param status - Tr·∫°ng th√°i thanh to√°n c·∫ßn l·ªçc
   * @returns Danh s√°ch ƒë·∫∑t ph√≤ng
   */
  async getBookingsWithPaymentStatus(paymentStatus: PaymentStatus): Promise<Booking[]> {
    return this.bookingRepository.find({
      where: {
        paymentStatus,
      },
      relations: ['user', 'homestay'],
      order: {
        createdAt: 'DESC', // S·∫Øp x·∫øp theo th·ªùi gian t·∫°o m·ªõi nh·∫•t
      },
    });
  }
}

export default new BookingService();
